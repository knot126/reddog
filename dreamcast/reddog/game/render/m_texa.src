; M_TexA.src
; Completely OnScreen Strip Model Renderer
				.CPU			SH4
				.OUTPUT			DBG=DWARF
				.SECTION		RASTERISERS, CODE, ALIGN=4
				.INCLUDE		"..\RedDog.pre"

				.EXPORT			_texMStripRasteriser
; Prototype: PKMDWORD texMStripRasteriser (ModelContext *context, Uint32 nStrip, Uint32 matNum, PKMDWORD kmPtr);
strip:			.REG			R8
kmPtr:			.REG			R7	; parm
matNum:			.REG			R6	; parm
nStrip:			.REG			R5	; parm
context:		.REG			R4	; parm
vertArray:		.REG			R3
kmVertParam:	.REG			R2
uvArray:		.REG			R1
vert:			.REG			R0
nextVert:		.REG			R9
kmPtrNext:		.REG			R10

XY:				.FREG			DR0
X:				.FREG			FR0
Y:				.FREG			FR1
ZW:				.FREG			DR2
Z:				.FREG			FR2
W:				.FREG			FR3
UV:				.FREG			DR4
U:				.FREG			FR4
V:				.FREG			FR5
PQ:				.FREG			DR6
P:				.FREG			FR6
Q:				.FREG			FR7

diffCol:		.FREG			FV8
diffColAR:		.FREG			DR8
diffColA:		.FREG			FR8
diffColR:		.FREG			FR9
diffColGB:		.FREG			DR10
diffColG:		.FREG			FR10
diffColB:		.FREG			FR11

; ***********************************************************************************
; NonColoured version (more optimal)
; ***********************************************************************************

_texMStripRasteriser:
				; Push used registers
				PUSH	R8
				PUSH	R9
				PUSH	R10

				; Set up the registers based on the context
				MOV.L	@(0, context), vertArray
				MOV.L	@(8, context), uvArray
				MOV.L	@(12, context), strip
				
				ADD		#32, context		; get to the colour part of the context
				FMOV.S	@context, diffColA	; only get alpha colour out
				ADD		#16, vertArray		; vertArray points at the x, y, rW, pad0
				FSCHG						; change to double size
				ADD		#-32, context		; put context back 

?mTexLoopReset
				MOV.L	#H'e0000000, kmVertParam
				DT		nStrip				; predecrement so we exit the main loop one cycle early

				MOV.W	@strip+, vert		; get the vertex number
				ADD		#24, kmPtr			; move kmPtr past UV

				FMOV.D	@uvArray+, UV		; get the UV values

				MOV.W	@strip+, nextVert	; get the next vertex number
				SHLL8	vert				; vert = vert * 256

				SHLR2	vert				; vert = (vert * 256) / 4  == vert * 64

				ADD		vertArray, vert		; vert now points at the prepped vertex's co-ords
?mTexLoop		FMOV.D	UV, @-kmPtr			; store in the UV coordinates [R]

				FMOV.D	@vert+, XY			; get X, Y [T]

				FMOV.D	@vert+, ZW			; get Z, W (w == pad0)
				FSCHG						; change to single stores (mutter mutter) [R]

				; [R][R][R] - ack! so put in these badgers
				SHLL8	nextVert
				PREF	@strip

				SHLR2	nextVert

				ADD		vertArray, nextVert	; now nextVert lives at the next vertex
				FMOV.S	Z, @-kmPtr			; store Z

				FMOV.S	Y, @-kmPtr			; store Y

				FMOV.S	X, @-kmPtr			; store X
				FSCHG						; change back to double stores (hooray)

				MOV.L	kmVertParam, @-kmPtr; store in the KM_VERTPARAM_NORMAL

				PREF	@kmPtr				; and SQ it to the TA (wooooooo!) [T]
				ADD		#48, kmPtr			; move kmPtr to the next SQ (and next address) and to the end of the diffuse colour

				FMOV.D	@vert+, XY

				FMOV.D	@vert+, ZW			; get the colour (XYZW == ARGB here)
				MOV		kmPtr, kmPtrNext	; start getting kmPtr -> specular bit
				
				FMOV.D	@vert+, UV			; start getting the specular colour
				ADD		#32-16, kmPtrNext	; kmPtrNext -> specular bit

				FMUL	diffColA, X			; X*= diffColA added here
				FMOV.D	@vert+, PQ			; UVPQ = specular colour now

				FMOV.D	ZW, @-kmPtr			; store in diffuse GB
				DT		nStrip				; decrement the strip counter

				; [R] see if 
				FMOV.D	XY, @-kmPtr			; store in diffuse AR
				MOV		nextVert, vert		; set up next vert

				FMOV.D	PQ, @-kmPtrNext		; store specGB

				FMOV.D	UV, @-kmPtrNext		; store specAR
				
				PREF	@kmPtr				; SQ blast!
				ADD		#32+24, kmPtr		; point at the next entry in the TA and move to past UV

				FMOV.D	@uvArray+, UV		; get the UV values
				BF/S	?mTexLoop			; and loop until we've done
				MOV.W	@strip+, nextVert	; get the next vertex number [s]
				
				; We still have one vert to do, after we make sure kmVertParam is ENDOFSTRIP
				MOV.L	#H'f0000000, kmVertParam

				FMOV.D	UV, @-kmPtr			; store in the UV coordinates [T]

				FMOV.D	@vert+, XY			; get X, Y [T]

				FMOV.D	@vert+, ZW			; get Z, W (w == pad0) [T]
				FSCHG						; change to single stores (mutter mutter)

				;[R][R][R]
				FMOV.S	Z, @-kmPtr			; store Z

				FMOV.S	Y, @-kmPtr			; store Y [T]

				FMOV.S	X, @-kmPtr			; store X [T]

				MOV.L	kmVertParam, @-kmPtr; store in the KM_VERTPARAM_NORMAL [T]
				PREF	@kmPtr				; and SQ it to the TA (wooooooo!)

				FSCHG						; change back to double stores (hooray)
				; Now to do the colour warez
				ADD		#48, kmPtr			; move kmPtr to the next SQ (and next address) and to the end of the diffuse colour
				FMOV.D	@vert+, XY	

				FMOV.D	@vert+, ZW			; get the colour (XYZW == ARGB here)

				;[R][R]
				FMUL	diffColA, X			; X*= diffColA
				FMOV.D	@vert+, UV			; start getting the specular colour

				FMOV.D	@vert+, PQ			; UVPQ = specular colour now

				;[R][R][R]
				FMOV.D	ZW, @-kmPtr			; store in diffuse GB

				FMOV.D	XY, @-kmPtr			; store in diffuse AR

				ADD		#32, kmPtr			; Point kmPtr at the end of the specular stuff

				;[R][R][R]
				FMOV.D	PQ, @-kmPtr			; store specGB

				FMOV.D	UV, @-kmPtr			; store specAR [T]

				; Now to check if the next strip is the same material
				CMP/EQ	nextVert, matNum
				PREF	@kmPtr				; SQ blast!

				ADD		#16, kmPtr			; point at the next entry in the TA for the retVal
				BF		?ItsTheEnd
				; Check this isn't a terminator
				MOV.W	@strip, vert
				CMP/EQ	#0, vert
				BT		?ItsTheEnd
				; OK - we can go round again, so update vert and kmVert and loop back
				ADD		#2, strip
				BRA		?mTexLoopReset
				MOV		vert, nStrip ; slot

?ItsTheEnd		; We now have to update UV and strip
				ADD		#-2, strip
				FSCHG						; back to boring single stores
				MOV.L	strip, @(12, context)

				MOV.L	uvArray, @(8, context)
				MOV		kmPtr, R0			; get return value

				; pop-a-lop
				POP		R10
				POP		R9
				RTS
				POP		R8		; slot

; ***********************************************************************************
; Coloured version
; ***********************************************************************************
				.EXPORT	_texMStripRasteriserColoured
_texMStripRasteriserColoured:
				; Push used registers
				PUSH	R8
				PUSH	R9
				PUSH	R10

				; Set up the registers based on the context
				MOV.L	@(0, context), vertArray
				MOV.L	@(8, context), uvArray
				MOV.L	@(12, context), strip
				
				FSCHG						; change to double size
				ADD		#32, context		; get to the colour part of the context
				FMOV.D	@context+, diffColAR; get alpha and red diffuse colour
				FMOV.D	@context+, diffColGB; get green and blue colour out
				ADD		#16, vertArray		; vertArray points at the x, y, rW, pad0
				ADD		#-48, context		; put context back 

?mTexLoopReset
				MOV.L	#H'e0000000, kmVertParam
				DT		nStrip				; predecrement so we exit the main loop one cycle early

				MOV.W	@strip+, vert		; get the vertex number
				ADD		#24, kmPtr			; move kmPtr past UV

				FMOV.D	@uvArray+, UV		; get the UV values

				MOV.W	@strip+, nextVert	; get the next vertex number
				SHLL8	vert				; vert = vert * 256

				SHLR2	vert				; vert = (vert * 256) / 4  == vert * 64

				ADD		vertArray, vert		; vert now points at the prepped vertex's co-ords
?mTexLoop		FMOV.D	UV, @-kmPtr			; store in the UV coordinates [R]

				FMOV.D	@vert+, XY			; get X, Y [T]

				FMOV.D	@vert+, ZW			; get Z, W (w == pad0)
				FSCHG						; change to single stores (mutter mutter) [R]

				; [R][R][R] - ack! so put in these badgers
				SHLL8	nextVert
				PREF	@strip

				SHLR2	nextVert

				ADD		vertArray, nextVert	; now nextVert lives at the next vertex
				FMOV.S	Z, @-kmPtr			; store Z

				FMOV.S	Y, @-kmPtr			; store Y

				FMOV.S	X, @-kmPtr			; store X
				FSCHG						; change back to double stores (hooray)

				MOV.L	kmVertParam, @-kmPtr; store in the KM_VERTPARAM_NORMAL

				PREF	@kmPtr				; and SQ it to the TA (wooooooo!) [T]
				ADD		#48, kmPtr			; move kmPtr to the next SQ (and next address) and to the end of the diffuse colour

				FMOV.D	@vert+, XY

				FMOV.D	@vert+, ZW			; get the colour (XYZW == ARGB here)
				MOV		kmPtr, kmPtrNext	; start getting kmPtr -> specular bit
				
				FMOV.D	@vert+, UV			; start getting the specular colour
				ADD		#32-16, kmPtrNext	; kmPtrNext -> specular bit

				FMUL	diffColA, X			; X*= diffColA
				FMOV.D	@vert+, PQ			; UVPQ = specular colour now

				FMUL	diffColR, Y			; Y*= diffColR
				DT		nStrip				; decrement the strip counter

				FMUL	diffColG, Z			; Z*= diffColG

				FMUL	diffColB, W			; W*= diffColB

				FMOV.D	ZW, @-kmPtr			; store in diffuse GB
				; [R] see if 
				FMOV.D	XY, @-kmPtr			; store in diffuse AR
				MOV		nextVert, vert		; set up next vert

				FMOV.D	PQ, @-kmPtrNext		; store specGB

				FMOV.D	UV, @-kmPtrNext		; store specAR
				
				PREF	@kmPtr				; SQ blast!
				ADD		#32+24, kmPtr		; point at the next entry in the TA and move to past UV

				FMOV.D	@uvArray+, UV		; get the UV values
				BF/S	?mTexLoop			; and loop until we've done
				MOV.W	@strip+, nextVert	; get the next vertex number [s]
				
				; We still have one vert to do, after we make sure kmVertParam is ENDOFSTRIP
				MOV.L	#H'f0000000, kmVertParam

				FMOV.D	UV, @-kmPtr			; store in the UV coordinates [T]

				FMOV.D	@vert+, XY			; get X, Y [T]

				FMOV.D	@vert+, ZW			; get Z, W (w == pad0) [T]
				FSCHG						; change to single stores (mutter mutter)

				;[R][R][R]
				FMOV.S	Z, @-kmPtr			; store Z

				FMOV.S	Y, @-kmPtr			; store Y [T]

				FMOV.S	X, @-kmPtr			; store X [T]

				MOV.L	kmVertParam, @-kmPtr; store in the KM_VERTPARAM_NORMAL [T]
				PREF	@kmPtr				; and SQ it to the TA (wooooooo!)

				FSCHG						; change back to double stores (hooray)
				; Now to do the colour warez
				ADD		#48, kmPtr			; move kmPtr to the next SQ (and next address) and to the end of the diffuse colour
				FMOV.D	@vert+, XY	

				FMOV.D	@vert+, ZW			; get the colour (XYZW == ARGB here)

				;[R][R]
				FMUL	diffColA, X			; X*= diffColA
				FMOV.D	@vert+, UV			; start getting the specular colour

				FMUL	diffColR, Y			; Y*= diffColR
				FMOV.D	@vert+, PQ			; UVPQ = specular colour now

				FMUL	diffColG, Z			; Z*= diffColG

				FMUL	diffColB, W			; W*= diffColB

				;[R][R][R]
				FMOV.D	ZW, @-kmPtr			; store in diffuse GB

				FMOV.D	XY, @-kmPtr			; store in diffuse AR

				ADD		#32, kmPtr			; Point kmPtr at the end of the specular stuff

				;[R][R][R]
				FMOV.D	PQ, @-kmPtr			; store specGB

				FMOV.D	UV, @-kmPtr			; store specAR [T]

				; Now to check if the next strip is the same material
				CMP/EQ	nextVert, matNum
				PREF	@kmPtr				; SQ blast!

				ADD		#16, kmPtr			; point at the next entry in the TA for the retVal
				BF		?ItsTheEnd
				; Check this isn't a terminator
				MOV.W	@strip, vert
				CMP/EQ	#0, vert
				BT		?ItsTheEnd
				; OK - we can go round again, so update vert and kmVert and loop back
				ADD		#2, strip
				BRA		?mTexLoopReset
				MOV		vert, nStrip ; slot

?ItsTheEnd		; We now have to update UV and strip
				ADD		#-2, strip
				FSCHG						; back to boring single stores
				MOV.L	strip, @(12, context)

				MOV.L	uvArray, @(8, context)
				MOV		kmPtr, R0			; get return value

				; pop-a-lop
				POP		R10
				POP		R9
				RTS
				POP		R8		; slot

				.SECTION		DATA
				.IMPORT			_pViewSize
a_pViewSize		.DATA.L			_pViewSize
				.END
