; M_TexTriA.src
; Textured non-clipped triangle renderer
				.CPU			SH4
				.OUTPUT			DBG=DWARF
				.SECTION		RASTERISERS, CODE, ALIGN=4
				.INCLUDE		"..\RedDog.pre"

				.EXPORT			_texturedModelRasteriserASM
; Prototype: PKMDWORD texturedModelRasteriserASM (ModelContext *context, Uint32 num, PKMDWORD pkm);
vNum:			.REG	R0
uv:				.REG	R1
v:				.REG	R2
strip:			.REG	R3
context:		.REG	R4
numTri:			.REG	R5
pkm:			.REG	R6
paramWord:		.REG	R7
vNum2:			.REG	R8

A:				.FREG	FR0
R:				.FREG	FR1
G:				.FREG	FR2
B:				.FREG	FR3
AA:				.FREG	FR4
RR:				.FREG	FR5
GG:				.FREG	FR6
BB:				.FREG	FR7

; XXX assumes material colour is white
; Quick setup time is essential
_texturedModelRasteriserASM:
				MOV		@context, v				; Get vertex array

				MOV		@(8, context), uv		; Get the UV array
				ADD		#16, v					; Make 'v' point at the position info of each PrepVtx

				PUSH	R8						; Preserve a register

				MOV		@(12, context), strip	; Get the strip list

				; And off we go!
?mainLoop		MOV.W	@strip+, vNum			; Get the vertex number for the first point
				ADD		#24, pkm				; point pkm at the position information
				
				SHLL2	vNum					; vNum = vNum * 4
				MOV.L	#H'e0000000, paramWord	; Get the vertex param word sorted

				SHLL2	vNum					; ..vNum = vNum * 16
				MOV.W	@strip+, vNum2			; Get the next vertex's number
				
				SHLL2	vNum					; ....vNum = vNum * 64

				ADD		v, vNum					; vNum now points at the position info of the PrepVtx
				FMOV.S	@uv+, A					; A is U

				SHLL2	vNum2					; vNum2 *= 4
				FMOV.S	@uv+, R					; R is V

				FMOV.S	@vNum+, AA				; AA is x
				SHLL2	vNum2					; vNum2 *= 16

				FMOV.S	R, @-pkm				; Store 'V'
				SHLL2	vNum2					; vNum2 *= 64

				FMOV.S	@vNum+, RR				; RR is y
				ADD		v, vNum2				; vNum2 now points at the position info of the PrepVtx

				FMOV.S	A, @-pkm				; Store 'U'

				FMOV.S	@vNum+, GG				; GG is 1 / w

				FMOV.S	GG, @-pkm				; Store 1/w

				FMOV.S	RR, @-pkm				; Store y
				ADD		#4, vNum

				FMOV.S	AA, @-pkm				; Store x

				MOV.L	paramWord, @-pkm		; Store in the Param Word

				FMOV.S	@vNum+, A				; Get diffuse colour....alpha

				PREF	@pkm					; SQ blast the first part
				ADD		#64, pkm				; Move to the end of the colour info

				FMOV.S	@vNum+, R				; ..red..

				FMOV.S	@vNum+, G				; ..green..

				FMOV.S	@vNum+, B				; ..blue..

				FMOV.S	@vNum+, AA				; Get specular colour....lpha

				FMOV.S	@vNum+, RR				; ..red..

				FMOV.S	@vNum+, GG				; ..green..

				FMOV.S	@vNum+, BB				; ..blue..

				MOV.W	@strip+, vNum			; Get last vertex's number

				FMOV.S	BB, @-pkm				; store specular blue
				SHLL2	vNum					; vNum*=4

				FMOV.S	GG, @-pkm				; store specular green
				SHLL2	vNum					; vNum*=16

				FMOV.S	RR, @-pkm				; store specular red
				SHLL2	vNum					; vNum*=64

				FMOV.S	AA, @-pkm				; store specular alpha
				ADD		v, vNum					; vNum now points at the last vertex

				FMOV.S	B, @-pkm				; store diffuse blue

				PREF	@uv						; break the monotony by fetching the UVs

				FMOV.S	G, @-pkm				; store diffuse green

				FMOV.S	R, @-pkm				; store diffuse red

				FMOV.S	A, @-pkm				; store diffuse alpha

				PREF	@pkm					; SQ blast it across
				ADD		#32+24, pkm				; Get ready for the next vertex

				; Vertex 2

				FMOV.S	@uv+, A					; A is U

				FMOV.S	@uv+, R					; R is V

				FMOV.S	@vNum2+, AA				; AA is x

				FMOV.S	R, @-pkm				; Store 'V'

				FMOV.S	@vNum2+, RR				; RR is y

				FMOV.S	A, @-pkm				; Store 'U'

				FMOV.S	@vNum2+, GG				; GG is 1 / w

				FMOV.S	GG, @-pkm				; Store 1/w

				FMOV.S	RR, @-pkm				; Store y
				ADD		#4, vNum2

				FMOV.S	AA, @-pkm				; Store x

				MOV.L	paramWord, @-pkm		; Store in the Param Word

				FMOV.S	@vNum2+, A				; Get diffuse colour....alpha

				PREF	@pkm					; SQ blast the first part
				ADD		#64, pkm				; Move to the end of the colour info

				FMOV.S	@vNum2+, R				; ..red..

				FMOV.S	@vNum2+, G				; ..green..

				FMOV.S	@vNum2+, B				; ..blue..

				FMOV.S	@vNum2+, AA				; Get specular colour....lpha

				FMOV.S	@vNum2+, RR				; ..red..

				FMOV.S	@vNum2+, GG				; ..green..

				FMOV.S	@vNum2+, BB				; ..blue..

				FMOV.S	BB, @-pkm				; store specular blue

				FMOV.S	GG, @-pkm				; store specular green

				FMOV.S	RR, @-pkm				; store specular red

				FMOV.S	AA, @-pkm				; store specular alpha

				FMOV.S	B, @-pkm				; store diffuse blue

				PREF	@uv						; break the monotony by fetching the UVs

				FMOV.S	G, @-pkm				; store diffuse green

				FMOV.S	R, @-pkm				; store diffuse red

				FMOV.S	A, @-pkm				; store diffuse alpha

				PREF	@pkm					; SQ blast it across
				ADD		#32+24, pkm				; Get ready for the next vertex

				; Vertex 3

				FMOV.S	@uv+, A					; A is U

				MOV.L	#H'F0000000, paramWord	; Get the vertex param word sorted

				FMOV.S	@uv+, R					; R is V

				FMOV.S	@vNum+, AA				; AA is x

				FMOV.S	R, @-pkm				; Store 'V'

				FMOV.S	@vNum+, RR				; RR is y

				FMOV.S	A, @-pkm				; Store 'U'

				FMOV.S	@vNum+, GG				; GG is 1 / w

				FMOV.S	GG, @-pkm				; Store 1/w

				FMOV.S	RR, @-pkm				; Store y
				ADD		#4, vNum

				FMOV.S	AA, @-pkm				; Store x

				MOV.L	paramWord, @-pkm		; Store in the Param Word

				FMOV.S	@vNum+, A				; Get diffuse colour....alpha

				PREF	@pkm					; SQ blast the first part
				ADD		#64, pkm				; Move to the end of the colour info

				FMOV.S	@vNum+, R				; ..red..

				FMOV.S	@vNum+, G				; ..green..

				FMOV.S	@vNum+, B				; ..blue..

				FMOV.S	@vNum+, AA				; Get specular colour....lpha

				FMOV.S	@vNum+, RR				; ..red..

				FMOV.S	@vNum+, GG				; ..green..

				FMOV.S	@vNum+, BB				; ..blue..

				FMOV.S	BB, @-pkm				; store specular blue

				FMOV.S	GG, @-pkm				; store specular green

				FMOV.S	RR, @-pkm				; store specular red

				FMOV.S	AA, @-pkm				; store specular alpha

				FMOV.S	B, @-pkm				; store diffuse blue

				PREF	@uv						; break the monotony by fetching the UVs

				FMOV.S	G, @-pkm				; store diffuse green

				FMOV.S	R, @-pkm				; store diffuse red

				FMOV.S	A, @-pkm				; store diffuse alpha

				DT		numTri
				PREF	@pkm					; SQ blast it across

				BF/S	?mainLoop
				ADD		#32, pkm				; Get ready for the next vertex

				; We now need to store back uv and strip
				MOV		uv, @(8, context)

				MOV		strip, @(12, context)	; Get the strip list
				MOV		pkm, R0					; return SQ

				RTS
				POP		R8						; pop-a-lop

				.END

