/*
 * boundregion.h
 */

#ifndef _boundregion_H
#define _boundregion_H

#include "HelpBase.h"
#include "resource.h"	  

//generated by gencid util from MAX SDK
#define BOUNDREGION_CLASS_ID_A 0x34417cd9
#define BOUNDREGION_CLASS_ID_B 0x7cf613e2

#define BOUNDREGION_CLASS_ID	Class_ID(BOUNDREGION_CLASS_ID_A, BOUNDREGION_CLASS_ID_B)

#define PB_BOUND_PARENT		0
#define PB_BOUND_RADIUS		1

extern ParamUIDesc BOUNDREGIONdesParam[];
#define BOUNDREGION_PARAMDESC_LENGTH 2

extern ParamBlockDescID BOUNDREGIONdescVer1[];
extern ParamBlockDescID BOUNDREGIONdescVer2[];
#define BOUNDREGION_PBLOCK_LENGTH	2
#define BOUNDREGION_CURRENT_VERSION	2

#define BOUNDREGION HelperBase<BoundCreatorClass, IDD_BOUNDREGION, IDS_BOUNDREGION, BoundParamDlg, BOUNDREGION_CLASS_ID_A, BOUNDREGION_CLASS_ID_B, BOUNDREGIONdesParam, BOUNDREGION_PARAMDESC_LENGTH>

class BoundCreatorClass; class BoundRegion; class BoundParamDlg;

class BoundParamDlg : public ParamMapUserDlgProc
{
private:
	BoundRegion	*ref;

public:
	BoundParamDlg (void *r);// { ref = (CampPoint *)r; }

	void DeleteThis() { delete this; }
	BOOL DlgProc(TimeValue t,IParamMap *map,HWND hWnd,UINT msg,WPARAM wParam,LPARAM lParam);
};

/* Creation of a collision object */
class BoundCreatorClass : public CreateMouseCallBack
{
private:
	BoundRegion		*ref;
public:
	BoundCreatorClass() {}
   	void setRef (BOUNDREGION *newRef) 
   	{ ref = (BoundRegion *)newRef; }

	int proc (ViewExp *vpt, int msg, int point, 
		int flags, IPoint2 m, Matrix3& mat);
};

class BoundRegion : public BOUNDREGION
{
private:
	friend class	BoundCreatorClass;
	static bool		cRotates;
	static float	cRadius;
public:
  	BoundRegion ();
	virtual void WindowFinal (IObjParam *ip);
	virtual RefTargetHandle Clone (RemapDir& remap = NoRemap())
	{ 
		BoundRegion *ret = new BoundRegion();
		ret->ReplaceReference (0, pblock->Clone (remap));
		return (ret);
	}
	bool Rotates() const 
	{ 
		int foo;
		Interval iv = FOREVER;
		pblock->GetValue (PB_IGN_PARENT, TimeValue(0), foo, iv); 
		return foo==1?TRUE:FALSE;
	}
	float GetRadius() const
	{ 
		float foo;
		Interval iv = FOREVER;
	   //	pblock->GetValue (PB_CAMP_RADIUS, TimeValue(0), foo, iv); 
		return foo;
	}
	
   //	IOResult Load(ILoad *iload);
   	virtual void DrawMarker (GraphicsWindow *gw, bool Selected = FALSE, bool Frozen = FALSE);
   //	virtual void GetLocalBoundBox (TimeValue t, INode *mat, ViewExp *vpt, Box3& box);
};


extern ClassDesc *GetBoundDesc();

struct BoundPt
{
	Point3	pt;
	bool	rotates;
	float	radius;
	BoundPt (const Point3 &p, bool r, float rad) : pt(p), rotates(r),radius(rad) {}
	BoundPt () {rotates=false;radius = 0;}
};

#endif
